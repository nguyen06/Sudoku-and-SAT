There are other methods to solving sudoku puzzles than reducing the problem to SAT and using a SAT Solver.

Another method is to use recursive backtracking, which is NP-HARD. However SAT-Solvers are also NP-HARD. And because you can verify a solution to SAT, and to a Sudoku puzzle in polynomial time, both methods of using a SAT Solver, and recursive backtracking are NP-COMPLETE problems.

As both methods can not be solved in polynomial time, it is not immediately clear which method performs better in practice. 

However, from our research on SAT Solvers it is likely that the SAT Solver would employ heuristics to speed up the computation. 

This would outperform a plain recursive backtracking algorithm that lacks any constraint satisfaction properties that does not cull move decision trees that contain moves that are not logical in the games rules.

When you add constraints to recursive backtracking it is not clear which method would be faster in practice. 
One approach to decide this would be to run both algorithms on the provided 50 puzzles and compare memory usage and computational time to decide a clear winner.
It could certainly be possible that under certain conditions one algorithm would perform better than the other and vice versa.

Overall, reducing Sudoku to SAT was a very informative process and required a lot of learning of new concepts, whereas implementing a recursive backtracking Sudoku Solver would not be as much of a learning experience. 
This is because we were already taught recursive backtracking in 226 and have experience with the N-Queens and Knight's tour problems.